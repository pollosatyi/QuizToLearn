using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QuizToLearn
{
    internal class ListQA
    {
        public List<(string, string)> listQA { get; set; }
        public ListQA()
        {
            listQA = new List<(string, string)>()
            {
                ("0. Что такое git-flow?"," это модель ветвления для Git, которая предлагает стандартизированный подход к управлению ветками в проекте.\n"+
                                          "Основные ветки в Git-flow:\n"+
                                           "master. В нем стабильный код. Хранит в себе версии релизов \n"+
                                           "develop. Основная ветка для разработки.В нее сливаются все ветки feature и из нее создаются release ветки\n"+
                                           "feature.Создаются  от develop и сливаются в develop.\n "+
                                            "release. Создаются от develop.Тестирование и документация. Сливается в master и develop\n"+
                                            "hotfix. Создаются для исправления багов. Сливаются в master и develop"),

                ("1. Чем git-flow отличается от trunk-based development?","это методология разработки, при которой вся команда работает в одной основной ветке (trunk или main)\n" +
                                                                        ", а изменения интегрируются как можно чаще (в идеале — несколько раз в день).\n" +
                                                                        " Это противоположность Git-flow, где используется множество долгоживущих веток."),

                ("2. Почему git-flow может тормозить команды, работающие по Scrum?","В Git-flow фичи разрабатываются в изоляции, а мержатся в develop только после полной готовности.\n" +
                                                                                  "merge часто происходит в ручную из за большого обьема кода\n "+
                                                                                  "У Scrum принцип \"работющий код каждый спринт\"\n"+
                                                                                  "Что подразумевает частный и простой merge "),

                ("3. Как установить git-flow на macOS через brew?","Проверить через терминал установлен и обновлен Homebrew\n" +
                                                                 " в терминале brew install git-flow.\n"),

                ("4. Как проверить, установлен ли git-flow и его версия?","which git-flow выдает путь где установлен git-flow\n"+
                                                                           "git-flow version выдает версию"  ),


                ("5.Можно ли использовать git-flow без установки расширения? ","Можно в ручную создать ветки и управлять ими с помощью гит\n "),

                


                ("6.Как проинициализировать git-flow?","git flow init"),

                ("7.Какие ветки создаются при инициализации?","Две ветки получают названия\n"+
                                                                "main (или master) — стабильная ветка для релизов.\n"+
                                                               "develop — основная ветка для разработки.\n"+
                                                               "Остальные просто получают префикс.\n"+
                                                               "feature/ —  ветка фич.\n"+
                                                               "release/ — ветка релизов\n"+
                                                                "hotfix/ — ветка срочных исправлений.\n"),
                
                ("8.Что произойдёт, если репозиторий уже содержит другие ветки?","Если уже есть ветки то git flow init не повредит их\n"+
                                                                                 "Init настроит git flow,учитывая существующую структуру\n"+
                                                                                 "Если изначально были ветки main или developer\n"+ 
                                                                                 "они остаются вместо создания новых\n"+
                                                                                 "При отсутствии developer создается от main\n "+
                                                                                 "Если совпадают старые вспомогательные остаются\n"+ 
                                                                                  "а новые создаются с префиксом\n"),

                ("9.Почему develop должна быть защищена в CI/CD? ","Нужно поддерживать стабильность ветки develop\n "+
                                                                   "Все коммиты должны делаться через merge/pullRequests\n "+
                                                                   "Это снижает риск поломанного коммита и делает историю измений контролируемой\n"+
                                                                   "иначе весь процесс теряет смысл\n"),

                ("10.Как начать фичу?","Переключится на develop git checkout develop\n"+
                                       "Убедиться что локальная ветка соответствует удаленной git pull origin develop\n"+
                                       "Создать новую фичу ветку и перейти на неё git checkout -b feature/new-feature-name\n"+
                                       "Добавить код и сделать коммит git add . git commit -m\n"+
                                       "Снова проверить обновления из develop git pull origin develop\n"+
                                       "Запушить ветку и открыть Merge/PullRequests  git push origin feature/newFeature\n"+
                                       "Затем зайти в git host и запросить слияние\n"+
                                       "После удачного слияния удаляем ветку локально: git branch -d feature/newFeature\n "+
                                       "и на удаленном сервере git push origin --delete feature/newFeature\n"),

                ("11. Что делает feature finish?","Код из feature/NewFeature, объединяется с develop через merge/pullRequests\n"+
                                                   "Удаляется ветка локально и удаленно\n"),

                ("12.Что произойдёт при feature finish, если есть незакоммиченные изменения?","выйдет ошибка. Можно сделать коммит \n"+
                                                             "git commit -m\n"+
                                                             "Или сделать временные сохраненее\n"+
                                                             "git stash\n"+
                                                             "git flow finish feature/newFeature\n"+
                                                             "git pop - возвращение изменений\n"+
                                                             "можно удалить изменения\n"+
                                                             "git reset --hard\n"),

                ("13.Как работать с фичей вдвоём?","один разработчик создает feature\n"+
                                                "git flow feature start newFeature\n"+
                                                "Пушим ветку на сервер\n"+
                                                "git push -u origin feature newFeature\n"+
                                                "второй разработчик получает актуальные ветки\n"+
                                                "git fetch --all\n"+
                                                "переходим на feature\n"+
                                                "git checkout feature\n"+
                                                "подтягиваем последние изменения\n"+
                                                "git pull origin feature\n"),
                ("14.Как начать релиз?","Ветка develop стабильна\n"+
                                         "Тесты проходят (CI/CD зелёный)\n"+
                                         " Версия проекта обновлена\n"+
                                         "git checkout develop\n"+
                                         "git pull origin develop\n"+
                                         "git flow release start new\n"
                                         ),
                ("15.Что делает release finish","смержит release в main\n"+
                                                "смержит release в develop\n"+
                                                "удалит release\n"+
                                                "переключит на develop\n"),

                ("16.Что делать, если хотфиксы уже в master,\n"+
                "а develop отстаёт?",
                                                       "Есть два способа:\n"+
                                                       "Первый способ:\n"+
                                                       "Merge master в develop\n"+
                                                       "git checkout develop\n"+
                                                       "git pull origin develop\n"+
                                                       "git merge master\n"+
                                                       "git push origin develop\n"+
                                                       "Второй способ:\n"+
                                                       "Перенос хотфиксов по одному. Cherry pick хотфиксов\n"+
                                                       "git checkout develop\n"+
                                                       "git pull origin develop\n"+
                                                       "git cherry-pick <хеш хотфикса>\n"+
                                                       "git push origin develop\n"),

               ("18.Когда использовать hotfix?","Когда критический баг в production, а релиз ожидается не скоро\n"),

               ("19.Что делает hotfix finish","Завершает ветку hotfix\n"+
                                               "merge в master и develop\n"+
                                               "а также делается теги\n"+
                                               "возвращение в исходную ветку\n"),

                ("19.Какие есть альтернативы GitHub?","GitLab, Bitbucket, Azure DevOps"),

                ("20.Можно ли работать в команде без GitHub?","Если только использовать свой сервер или одну папку с проектом"),

                ("21.Что такое origin в контексте GitHub?","Алиас псевдоним для адреса вашего  на удаленного репозитория\n"+
                                                           "Сокращенная ссылка чтоб не вводить полный url адрес каждый раз\n"),

                ("22.Что происходит при git add .","В индекс(staging area) добавляются:\n"+
                                                    "Новые файлы untracked\n"+
                                                    "Измененные файлы modified\n"+
                                                    "Удаленные файлы deleted\n"+
                                                    "Технически:\n"+ 
                                                    "git вычисляет хеш каждого файла и сохраняет его временной зоне\n "+
                                                    "данные файлов записываются в объектную базу Git(папка .git/objects\n"),

                ("23.В чём разница между git commit и git commit -a","git commit требует git add\n"+
                                                                     "git commit -a добавляет в коммит  все изменения  tracked файлов\n"+
                                                                     "добавление новых untracked требует git add\n"),

                ("24.Что делает git add -p?","Это инструмент для интерактивного выбора изменений,\n"+        
                                              "которые нужно добавить в staging area\n"+
                                              "Позволяет разбить изменения в файле на кусочки(hunks)\n"+
                                              "и выбрать какие попадут в коммит, а какие нет\n "+
                                              "не работает для новых файлов\n"),

                ("25.Что такое индекс в Git?","Индекс это промежуточная область(staging area или cache),\n"+
                                              "где Git временно хранит изменения перед тем как они попадут в коммит\n"+
                                              "Untracked - новый файл, еще не отслеживаемый\n"+
                                              "Modified - файл изменён, но не добавлен в индекс\n"+
                                              "Staged - изменения добавлены в индекс(готовы к коммиту)\n"+
                                              "Committed - изменения сохранены в репозиторий\n "+
                                              "git reset удаляет изменения в индексе\n"+
                                              "git diff --cached Показывает изменения добавленные в индекс\n"),

                ("26.Можно ли сделать коммит без git add","Можно с помощью команды git commit -a\n"),

                ("27.Что делает git checkout branch-name?","переключение на указанную ветку в git"),

                ("28.Как переключиться на предыдущий коммит?","git checkout Head~1\n"+
                                                              "git checkout SHA 1\n"+
                                                              "просмотр изменений git show HEAD~1\n"),

                ("29.Как вернуться к последнему коммиту после checkout на хеш? ","git switch - переключение на предыдущую\n"+
                                                                                  "git switch имя ветки\n"+
                                                                                  "git checkout имя ветки\n"+
                                                                                  "Если название ветки неизвестно\n"+
                                                                                  "git reflog в сообщение будет написано названии ветки\n"),

                ("30.В чём разница между git switch и git checkout?","switch новая команда для простого и понятного переключения между ветками\n"+
                                                                     "откажется работать если есть незакоммичные изменения\n"+
                                                                     "требуется явного --merge или --discard-changes\n"+
                                                                     "checkout попытается сохранить изменеия автоматически\n"),
                
                ("31.Как найти хеш нужного коммита?","git log\n"+
                                                     "--oneline - сокрашенная хеш и сообщение\n"+
                                                     "--graph с визуализации ветвления\n"+
                                                     "-n 5 последние пять коммитов\n"+
                                                     "-- author \n+" +
                                                     "--grep\n по сообщению"),

                ("32.Как создать аннотированный тег?","git tag -a имя -m \"сообщение\"\n"+
                                                      "git push origin имя - отправка\n"+
                                                      "git push origin --tags - отправка всех\n"),

                ("33.Как перейти к тегу?","git checkout имя\n"+
                                           "git switch --detach имя\n"),

                ("34.Как посмотреть все теги?","git tag\n"
                                               + "или git ls-remote --tags удаленные,\n"+
                                              "git tag -n аннотированные теги\n"),

                ("35.В чём разница между легковесным и аннотированным тегом?","Разницами между тегами заключается в способе их хранения и дополнительной информации\n"+
                                                                               "Легковесный тег Lightweight Tag это указатель на конкретный коммит\n"+
                                                                               "не содержит дополнительной информации\n"+
                                                                               "git tag имя тега\n"+
                                                                               "Аннотированный тег Annotated Tag это полноценный объект в Git, который хранит:\n"+
                                                                               "Имя тега\n"+
                                                                               "Сообщение(как у коммита)\n"+
                                                                               "Автор тега\n"+
                                                                               "Дату создания\n"+
                                                                               "Указатель на коммит\n+" +
                                                                               "Может быть подписан GPG(для верификации)\n"+
                                                                               "git tag -a имя тега -m соббщение тега\n"),

                ("36.Как отправить тег в удалённый репозиторий?","git push origin имя тега\n"+
                                                                 "git push origin --tags  -отправка всех тегов\n"),

                ("37.Как создать и сразу перейти в новую ветку?","git checkout -b имя ветки\n"+
                                                                 "git switch -c имя ветки\n"+
                                                                 "git checkout -b имя ветки источник\n"),

                ("38.Как посмотреть список всех веток?","git branch - только локальные\n"+
                                                        "git branch -r только удаленные ветки\n"+
                                                        "git branch -a все ветки\n"+
                                                        "git branch -vv подробный вывод(с коммитами и связями)\n"+
                                                        "git show-branch графическое представление\n"+
                                                        "git log --oneline --graph --all история всех веток в виде графа\n"),

                ("39.Как создать ветку от определённого коммита?","git branch имя ветки хеш\n"+
                                                                  "git checkout -b новая ветка хеш коммита - с переходом\n"+
                                                                  "git switch -c новая ветка хеш коммита - с переходом\n"),

                ("40.Что делает git switch -c name?","создание ветки с переходом\n"),

                ("41.Где хранятся ссылки на ветки?","Вся информации о ветках локальных и удаленных хранится в папке .git\n"+
                                                    "Каждая ветка это файл, содержащий SHA-1 хеш последнего коммита в этой ветке\n"+
                                                    ".git/refs/heads\n"+
                                                    ".git/refs/remotes/origin\n"),

                ("42.Что делает git merge feature?","объединяет изменения из ветке feature в текущую\n"+
                                                     "git checkout main\n"+
                                                     "git merge feature\n"+
                                                    "Fast-Forward Merge(быстрая перемотка)\n"+
                                                    "Если main не имеет новых коммитов после ответвления feature:\n"+
                                                    "Git просто перемещает указатель main на последний указатель feature\n"+
                                                    "История остается линейной(без нового коммита)\n"+
                                                    "Recursive merge(Рекурсивное слияние)\n"+
                                                    "Если в main и feature есть изменения\n"+
                                                    "Git создает новый коммит слияния(merge commit)\n"+
                                                    "В истории появляется развилка(ветвление и соединение)\n"+
                                                    "Конфликты слияния. Если в main и feature затрагивают одни и те же строки \n"+
                                                    "Git останавливает процесс и сообщает от конфликте\n"+
                                                    "Нужно в ручную исправить конфликт,затем завершить слияние\n"+
                                                    "git add .\n"+
                                                    "git merge --continue\n"+
                                                    "Флаги:"+
                                                    "--no --ff всегда создает коммит сляиния\n"+
                                                    "--squash - объединяет все изменения в один коммит сливаемой ветки\n"+
                                                    "--abort - отменяет слияние при конфликтах\n"),

                ("43.Что такое fast-forward merge?","Это тип слияния в Git, при котором история веток остается линейной, не создает новый коммит слияния\n+" +
                                                    "Он возможен, если целевая ветка не получила новых изменений с момента создания сливаемой ветки\n"+ 
                                                    "а просто перемещает указатель текущей ветки вперед до конца целевой\n"
                                                    ),

                ("44.Как отменить конфликтное слияние?","Если конфликты не разрешены git merge --abort\n"+
                                                        "Кофликты разрешены, но нет коммита  git reset --hard HEAD\n"+
                                                        "Merge уже закомичен git reset --hard HEAD~1(локально)\n"+
                                                                             "git revert -m 1 <commit> если был отправлен\n"),

                ("45.Как увидеть коммиты, которые будут вливаться?","git log имя1 имя2\n"+
                                                                    "git log --online --graph --all графический просмотр\n"),

                ("46.Что делает git merge --no-ff","выполняет слияние веток в Git всегда создавая новый коммит\n"+
                                                    "даже если можно сделать fast-forward\n"),

                ("47.Как связать локальный проект с GitHub?","git init\n"+
                                                              "git add .\n"+
                                                              "git commmit -m\"сообщение\"\n"+
                                                              "git remote add origin ссылка\n"+
                                                              "git push -u origin main\n"),

                ("48.Как отправить первую версию на GitHub?", "git init\n"+
                                                              "git add .\n"+
                                                              "git commmit -m\"сообщение\"\n"+
                                                              "git remote add origin ссылка\n"+
                                                              "git push -u origin main\n"),

                ("49.Как переименовать удалённый репозиторий?","В репозитории GitHub Settings - Repository name - Rename\n"+
                                                               "Обновление локального git remote set-url origin новая ссылка\n"),

                ("50.Как проверить адрес удалённого репозитория?","git remote get-url origin\n"),

                ("51.Как удалить привязку к удалённому?","git remote remove origin \n"+
                                                         "git remote rm origin старая версия\n"+
                                                         "git remote -v проверка"),

                ("52.Какие типы объектов есть в Git?","Есть 4 основных типа обьектов в Git\n"+
                                                      "которые хранят историю и структуру репозитория\n"+
                                                      "Они лежат в папке .git/objects и имеют хеш индекаторы SHA-1\n"+
                                                      "Blob Binary Large Object:\n"+
                                                      "В нем содержимое файлов в сжатом ввиде\n"+
                                                      "Tree (Дерево):\n"+
                                                      "Структуру каталогов (аналогично папкам в файловой системе)\n"+
                                                      "Ссылки на blobs(файлы) и другие trees(подкаталоги)\n"+
                                                      "Метаданные: имена файлов, права доступа\n"+
                                                      "Commit(Коммит)\n"+
                                                      "Ссылку на tree (состояние файлов на момент коммита)\n"+
                                                      "Ссылки на родительские коммиты. Коммитов может быть один или два(при слияние)\n"+
                                                      "А также автора, дату и сообщение\n"+
                                                      "Tag(Аннотированный тег):\n"+
                                                      "Ссылку на коммит(обычно версию)\n"+
                                                      "Имя тега, автора, дату, описание\n"),

                ("53.Где они физически хранятся объекты Git?","Все объекты хранятся в .git/objects\n"+
                                                  "git cat-file -t sha или tag показать тип объекта\n"+
                                                  "git cat-file -p показать тип объекта\n"),

                ("54.Что такое Blob?","Binary Large Object. Один из четырех основных типов объектов в Git\n"+
                                       "которое хранит содержимое файла\n"+
                                       "Создается командой git add\n"+
                                       "Вычисляется SHA1 и сохраняет сжатые данные\n"),

                ("55.Что такое Tree?","Это объект Git которое описывает структуру каталогов и файлов\n"+
                                       "Он связывает blob объекты и другие tree объекты \n"+
                                       "в единую файловую систему\n"),

                ("56.Что такое Commit-объект?","Это объект Git, который фиксирует состояние репозитория\n"+
                                               "в определенный момент времени. Он хранит:" +
                                               "Снимок файловой структуры(через tree объекты)\n"+
                                               "Метаданные: автора, дату, сообщение и ссылку на родительские коммиты\n"),

                ("57.Что делает команда git init folder-name, если папка уже существует?","Если папка пустая:\n"+
                                                                                          "Создает новый git репозиторий в указанной папке\n" +
                                                                                           "Git создаст скрытую подпапку .git\n"+
                                                                                           "и инициализирует в ней репозиторий\n"+
                                                                                           "Иначе выдаст ошибку\n"),

                ("58.В чём принципиальная разница между git init и git clone?","init создает новый репозиторий с нуля\n"+
                                                                               "clone копирует существующий репозиторий(локальный или удаленный)\n"),

                ("59.Можно ли использовать git init внутри уже инициализированного репозитория?","Git проигнорирует команду git init и выдаст предупреждение\n"),

                ("60.Что хранится в папке .git после git init?"," два основных файла:\n"+
                                                                "HEAD указывает на текущую ветку\n"+
                                                                "config локальные настройки репозитория\n"+
                                                                "Служебные папки:\n"+
                                                                "hooks скрипты для автоматизации\n"+
                                                                "info файл для игнорирования файлов\n"+
                                                                "objects хранилище объектов Git\n"+
                                                                "refs ссылки на ветки и теги\n"),

                ("61.Как проверить, инициализирован ли каталог как Git-репозиторий?","проверить есть ли папка .git\n"+
                                                                                     "git status\n"+
                                                                                     "git branch\n"+
                                                                                     "git remote -t\n"),

                ("62.Что произойдёт, если выполнить git clone <https://url.git> . в уже инициализированной папке?","Выдаст ошибку\n"),

                ("63.Как клонировать репозиторий без загрузки содержимого (bare)?","git clone --bare url\n"),

                ("64.Что означает FolderName в команде git clone url FolderName?","Создаст папку и клонирует туда репозиторий\n"+
                                                                                  "Если папка есть то выдаст ошибку\n"),

                ("65.Как клонировать только определённую ветку?","git clone --branch dev --single-branch Url - клонирование одной ветки\n"+
                                                                 "git fetch origin other-branch - добавление ветки позже\n"),

                ("66.Что делает параметр --depth при клонировании? ","Позволяет клонировать репозиторий без полной истории\n"+
                                                                     "загружая только последние N коммитов указанной ветки\n"+
                                                                     "Это называется поверхностным клонированием(shallow clone)\n"),

                ("67.Чем отличается git diff от git diff --staged?","git diff сравнивает рабочую директорию и индекс(Staging Area)\n"+
                                                                    "git diff --stage сравнивает индекс и последний коммит\n"+
                                                                    "git diff HEAD рабочую директорию vs последний коммит\n"),

                ("68.Что покажет git diff master...feature?","Сравнивает изменения,внесенные в ветку feature\n"+
                                                             "Относительно точки расхождения с веткой master\n"+
                                                             "git diff origin/master...origin/feature\n удаленной ветки\n"),

                ("69.Что произойдёт, если файл изменён, но не проиндексирован? Где он появится в git status?","файл будет строке modified\n"),

                ("70.Что делает флаг --name-only у git diff?","Упрощает вывод, показывая только имена изменных файлов, без деталей самых изменений\n"+
                                                               ""),

                ("71.Почему git diff игнорирует неотслеживаемые файлы?","Потому что до добавления Git не знает про них\n"+
                                                                        "--no--index для принудительного сравнения\n"),

                ("72.Что делает git add -p и зачем это нужно?","запускает интерактивный режим добавления изменений в индекс\n"+
                                                               "Она позволяет выборочно добавлять части файлов(отдельные части, а не весь файл целиком\n"+
                                                               "y - yes добавить в текущий кусок в staging\n"+
                                                               "n - no пропустить кусок\n"+
                                                               "s - split разделить на более мелкие части\n"+
                                                               "e  - edit в ручную отредактировать кусок перед добавлением\n"+
                                                               "q - quit выйти из режима\n"+
                                                               "? - справка по всем опциями\n"),

                ("73.Чем отличается git add -i от git add -p?","git add -i работает с целыми файлами\n"+
                                                               "Имеет текстовое меню с опциями\n"+
                                                               "update - добавить файлы в staging\n"+
                                                               "revert - убрать файлы из staging\n"+
                                                               "add untracked - добавить неотслеживаемые файлы\n"+
                                                               "patch перейти в режим git add -p для выбранного файла\n"),

                ("74.Что произойдёт, если после git add . изменить файл?","Будет две версии файла одна в staging area,\n"+
                                                                           "другая в рабочей директории\n"),

                ("75.Как удалить файл из индекса, но оставить его в рабочей директории?","git rm --cached\n"+
                                                                                           ""),

                ("76.Можно ли добавить в индекс только часть изменений одного файла?","git add -p\n"+
                                                                                      "git add -e ручное редактирование патчей\n"+
                                                                                      "git add -i добавление отдельных строк\n"),

                ("77.Что удаляет git reset --hard?","Отменить все изменения до последнего коммита\n"+
                                                    "git reset hard <хеш коммита> отменить все изменения до коммита\n"+
                                                    ""),

                ("78.Как отменить только последние изменения, оставив индекс нетронутым?","git restore имя\n"+
                                                                                          "git restore .\n"+
                                                                                          "git checkout --\n"),

                ("79.Зачем нужен git clean -df и что он удаляет?","Он удаляет untracked файлы\n"+
                                                                   "d - флаг для удаления директорий\n"+
                                                                   "f - флаг опасных операций\n"+
                                                                   "x - флаг удаления из списка gitignore\n"),

                ("80.Что будет, если сделать git reset без аргументов?","покажет список флагов для git reset\n"),

                ("81. Чем reset --hard отличается от revert","revert создает коммит отменяющий изменения\n"+
                                                             "сохраняет историю коммитов, добавляя новый\n"),

                ("82.Что делает команда git commit -a -m \"msg\" и чем она отличается от git commit -m \"msg\"?",""+
                                                          "-a позволяет добавить изменения в файлах без git add .\n"),

                ("83.Можно ли закоммитить новые файлы с помощью git commit -a","новые файлы обязательно нужно добавлять в индекс\n"),

                ("84.Как отменить последний коммит, не удаляя изменения в рабочей директории?","git reset --soft HEAD~1\n"+
                                                                                               "git reset --mixed HEAD~1\n"+
                                                                                               "git revert HEAD\n"),

                ("85.В чем разница между git reset --soft, --mixed и --hard","--soft Перемещает указатель, не трогает изменения\n"+
                                                                             "--mixed Перемещает указатель, изменения становятся unstaged\n"+
                                                                             "--hard Перемещает указатель, сбрасывает изменения\n "),

                ("86.Что делает команда git commit --amend?","позволяет изменить коммит без создания нового\n"+
                                                             "-m изменить сообщение\n"+
                                                             "Git не удаляет старый коммит,а создает новый\n"+
                                                             "старый коммит становится недостижимым\n"),

                ("87.Что делает git revert HEAD --no-edit?","Выполняет отмену последнего коммита,\n"+
                                                            "создавая новый коммит с обратными изменениями\n"+
                                                            "при этом автоматически используя стандартное сообщение коммита\n"+
                                                            "без открытия редактора коммита\n"),

                ("88.В каких случаях git revert безопаснее, чем git reset?","когда коммит отправлен на удаленный репозиторий\n"+
                                                                            "нужно сохранить историю изменений\n"+
                                                                            "когда работают в одной ветке больше одного разработчика\n"+
                                                                            "reset может удалить измения другого разработчика\n"+
                                                                            "когда нужно отменить конкретный коммит, \n"+
                                                                            "reset удалит всё до указанного коммита\n"+
                                                                            "когда нужно уменьшить количество конфликтов\n"),

                ("89.Что произойдёт после выполнения git reset --hard @~2","полный сброс состояния репозитория до 2 коммита\n"),

                ("90.Что делает git reset --keep @~ и когда он полезен?","безопасная альтернатива git reset --hard\n"+
                                                                         "Перемещает указатель HEAD на предыдущий коммит\n"+
                                                                         "Сохраняет незакомиченные изменения в рабочей директории,\n "+
                                                                         "если не конфликтуют с целевым коммитом\n"+
                                                                         "сбрасывает индекс\n"),

                ("91.Какой командой можно безопасно заменить последний коммит новым, не создавая отдельного коммита отката?",""+
                                                                 "сделать изменения и выполнить команду git commit --amend\n"+
                                                                 "если только нужно изменить сообщение то git commit --amend -m\n"+
                                                                 "изменить автора git commit --amend --reset-author\n"+
                                                                 "если изменений много то git reset --soft HEAD^ + новый коммит\n"),

                ("92.Что делает git checkout b9533bb?","Переключение рабочей директории на состояние коммита с указанным хешом\n"),

                ("93.Как вернуться обратно в ветку main после переключения на старый коммит?","git checkout имя ветки\n"+
                                                                   "git switch main\n"+
                                                                   ""),

                ("94.Чем опасен detached HEAD и как его \"обезвредить\"?","Новые коммиты висят в воздухе\n"+
                                                                          "Они не принадлежат ни одной ветке и могут быть потеряны\n"+
                                                                          "если не создать новую ветку\n"+
                                                                          "Git не предупредит об удалении\n"+
                                                                          "Чтоб обезвредить detached HEAD\n"+
                                                                          "вернуться в ветку\n"+
                                                                          "Если есть изменения, но не закомичены, то сохранить изменения в новой ветке\n"+
                                                                          "Если закомичены то сделать новую ветку, а потом merge\n"+
                                                                          "Если изменения не нужны просто выйти\n"+
                                                                          "коммиты можно найти только через git reflog\n"+
                                                                          "найти хеш коммита git reflog\n" + 
                                                                          "создать ветку от коммита git branch saved-commits хеш\n"),

                ("95.Как создать новую ветку, начиная с произвольного коммита?","git branch имя хеш\n"+
                                                                                "git checkout -b имя хеш\n"),

                ("96.Что произойдёт после git checkout master?","Git переключится на ветку master\n"+
                                                                "и рабочая директория обновится до последнего сотояния коммита этой ветки\n"+
                                                                "Если в текущей ветки были незакомиченные изменения,\n"+
                                                                "Git попытается сохранить изменения или выдаст предупреждения\n"+
                                                                "Указатель HEAD переместится на ветку master\n"),

                ("97.Что делает git checkout 5589877 index.html?","Выполняет восстановление кокретного файла из указанного коммита\n"+
                                                                  "в рабочую директорию и индекс\n"+
                                                                  "альтернативный вариант:\n"+
                                                                  "git restore --source хеш --worktree имя файла\n"),

                ("98. Можно ли отменить это восстановление?(git checkout sha1 имя файла)","Если еще не закомичены:\n"+
                                                             "вернуть файл к последней закомиченной версии\n"+
                                                             "git checkout HEAD --имя файла\n"+
                                                             "git restore имя файла\n"+
                                                             "отменить все изменения,если они не были добавлены в staging\n"+
                                                             "git checkout --имя файла\n"+
                                                             "Если уже закомитили восстановленый файл:\n"+
                                                             "Создать новый коммит, отменяющий изменения\n"+
                                                             "git revert HEAD\n"+
                                                             "Откатить последний коммит(если он не был отправлен в удаленный коммит)\n"+
                                                             "git reset --soft HEAD~1 отмена коммита, но сохранение изменений в stage\n"+
                                                             "git reset HEAD имя файла убирает файл из stage\n"+
                                                             "git checkout --имя файла\n"+
                                                             "или полный откат коммита git reset --hard HEAD~1\n"+
                                                             "Чтоб вернуть файл к состоянию до всех изменений(включая staged)\n"+
                                                             "git reset HEAD имя убирает из staged\n"+
                                                             "git checkout --имя  сбрасывает изменения в рабочей директории\n"+
                                                             ""),

                ("99.Как перенести изменения из одного коммита в другую ветку?","git cherry-pick если нужно перенести конкретный коммит\n"+
                                                                                "переключение на целевую ветку git checkout имя\n"+
                                                                                "git cherry-pick хеш коммита\n"+
                                                                                "git merge полное слияние\n"+
                                                                                "git rebase имя целевой ветки когда нужно перебросить коммиты одной ветки на другую\n"+
                                                                                "git checkout <коммит> -- <файлы> если нужны только некоторые файлы\n"+
                                                                                ""),

                ("100.Что произойдёт, если сделать git cherry-pick master~2..master?","Git перенесет два последних коммита из ветки мастер\n"+
                                                                                     "master~2 начало отсчета коммитов\n"+
                                                                                     ".. диапазон\n"+
                                                                                     "master окончание диапазона\n"+
                                                                                     "создаст новый коммит, а потом добавит два коммита в текущей ветке\n"),

                ("101.Что делать при конфликте во время cherry-pick?","При возникновении конфликта слияния Git останавливает операцию и требует ручного разрешения конфликта\n"+
                                                                      "В ручную разобрать в редакторе конфликт\n"+
                                                                      "git add .\n"+
                                                                      "git cherry-pick --continue\n"+
                                                                      "git cherry-pick --abort вернет состояние до выполнения команды\n"+
                                                                      "git cherry-pick --skip пропустить текущий конфликтный коммит\n"),


                ("102.Что произойдёт при выполнении команды git rm text.txt?","Полностью удалится файл из рабочей директории и индекса\n"+
                                                                              ""),

                ("103.В чем отличие git rm и git rm --cached","-- cached Файл будет удален только из индекса\n"),

                ("104.Что делает git rm -f и зачем нужен флаг -f","Принудительно удаляет файл из рабочей директории и индекса,\n"+"" +
                                                                  "игнорирует любые предуждения или конфликты\n"),

                ("105.Когда удобно использовать git rm --cached?","Полезна в ситуациях когда нужно перестать отслеживать изменения файлов\n"+
                                                                   "Добавление файлов в gitignore после того как его закомитили\n"+
                                                                   "Удаление случайно добавленных файлов\n"+
                                                                   "Прекращение отслеживания без удаления файла\n"),

                ("106.Что делает git rm ind*?","Удаляет файлы из рабочей директории и индекса, соответствующие шаблону\n"+
                                               "Работает только с отслеживаемыми файлами,иначе выдаст ошибку\n"+
                                               "для удаления файлов с незакомиченными изменениями нужен флаг -f\n"+
                                               "-r рекурсивное удаление в поддерикториях\n "),

                ("107.Что делает команда git branch -f master 5589877?","Принудительно перемещает ветку master на указанный коммит\n"+
                                                                        "Все коммиты после указанного теряют связь с веткой\n"),

                ("108.Как создать ветку new_branch на два коммита назад от master","git log master --oneline -3 поиск нужно коммита\n"+ 
                                                                                   "git branch имя ветки имя SHA1\n"+
                                                                                   "git branch имя master~2\n"+
                                                                                   "git checkout имя master~2\n"),

                ("109.Чем git checkout -b отличается от git checkout -B?","-b выдаст ошибку при перезаписи\n"+
                                                                          "-B перезапишем\n"),

                ("110.Что делает git branch -d hotfix?","Удаляет ветку при условии что она была слита в другую ветку\n"+
                                                        "иначе будет ошибка\n"+
                                                        "D удаление в любом случае\n"),

                ("111.Как посмотреть ветки, которые не были слиты в текущую?","Основной способ: git branch --no-merged\n"+
                                                                              "git branch --no-merged проверка конкретной\n"+
                                                                              "git branch -r --no-merge удаленные ветки\n"+
                                                                              "git branch merge просмотр слитых веток\n"+
                                                                              "git log --online --no-merge имя имя текущей\n"+
                                                                              "git log --graph --oneline --all графическое представление\n"),

                ("112.Что делает git stash?","Временно сохраняет незакомиченные изменения в рабочей директории\n"+
                                              "-a изменения в индексе\n"+ 
                                              "- include-untracked включая новые файлы\n"),

                ("113.Что произойдёт при git stash pop","Git возьмет самый свежий stash\n"+
                                                        "Применит изменения к рабочей директории и индексу\n"+
                                                        "Удаляет stach из списка\n"+
                                                        "При конфликте:\n"+
                                                        "Git останавливает операцию\n"+
                                                        "Stach не будет удален\n"+
                                                        "разрешить конфликт в ручную\n"+
                                                        "git add. \n"+
                                                        "git stach drop для удаления\n"+
                                                        "git stach apply не удаляет stach\n"),

                ("114.Можно ли сделать несколько stash-записей?","В Git можно делать несколько stach\n"+
                                                                 "они сохраняются ввиде стека\n"+
                                                                 ""),

                ("115.Что произойдёт, если после git stash создать новую ветку?","Stach останется доступным в новой ветке\n"+
                                                                              "Stach в Git привязан к репозиторию,а не конкретной ветке\n"+
                                                                              ""),

                ("116.Как посмотреть список всех stash-записей?","git stach list\n"),

                ("117.Как посмотреть URL удалённого репозитория?","git remote -v\n"+
                                                                  "git remote --verbose\n"+
                                                                  "конкретного git remote get-url origin\n"+
                                                                  "git remote просмотр всех\n"+
                                                                  "git remote show origin подробный просмотр\n"),

                ("118.Что делает git remote remove origin?","Удаляет связь вашего репозитория с удаленным\n"+
                                                            "git remote rm origin сокращеная\n"+
                                                            ""),

                 ("119.Что делает git push origin :old_branch_name new_branch_name?","Удаляет старую удаленную ветку\n"+
                                                                                     "Пушит локальную ветку на удаленный репозиторий\n"+
                                                                                     "Локальные ветки остаются, удаляется только удаленная\n"+
                                                                                     ""),
                 
                 ("120.Как посмотреть удалённые ветки?","git branch -r\n"+
                                                        "git remote show origin подробный список\n"+
                                                        "git branch -a список локальных и удаленных\n"+
                                                        ""),

                 ("121. Что делает git remote show origin?","Выводит подробную информацию о подключенном удаленном репозитории\n"+
                                                            "URL\n"+
                                                            "отслеживаемые ветки\n"+
                                                            "настройки и статус синхронизации\n"),

                 ("122.Чем git rebase отличается от git merge?","git merge создает новый коммит слияния\n"+
                                                                "История остается нелинейной\n"+
                                                                "git rebase перемешает коммиты одной ветки поверх другой\n"+
                                                                "история остается линейной\n"+
                                                                "merge безопасен для командной работы\n"+
                                                                "Конфликты разрешаются один раз\n"+
                                                                "Для публичных веток\n"),

                 ("123.Почему использование git rebase может привести к конфликтам?","Переписывает историю, а не объединяет ее\n"+
                                                                                     "Применяет каждый коммит отдельно, увеличивая точки потенциальных конфликтов\n"+
                                                                                     "Требует больше ручной работы, но дает чистую историю\n"),

                 ("124. Как выполнить rebase ветки с основной веткой?","git rebase main\n"+
                                                                       ""),

                 ("125.Как отменить git rebase, если возникли проблемы с конфликтами?","git rebase --abort\n"),

                 ("126.Как продолжить git rebase после разрешения конфликтов?","git add .\n"+
                                                                                "git rebase --continue\n"),

                 ("127. Что делает команда git rebase --onto master feature","Выполняет сложную операцию перебазирования,\n" +
                                                                              "позволяет перенести часть коммитов из одной ветки в другую\n"+
                                                                              "минуя промежуточные изменения\n"),

                 ("128.Когда и почему полезно использовать git rebase --onto","Когда нужно перенести только часть коммитов\n"+
                                                                              "Когда нужно отрезать ненужные коммиты из истории\n"+
                                                                              "Когда нужно перебазировать несколько веток\n"+
                                                                              "Когда нужно исправить ошибку в базой ветке\n"+
                                                                              "Когда нужно разделить историю\n"),

                 ("129. Как использовать git reflog, чтобы найти коммит, на который можно откатить ветку после неудачного rebase?",""+
                                                                              "git reflog хронологический список всех действий,\n"+
                                                                              "включая переключение веток, коммиты и rebase\n"+
                                                                              "поиск стабильного коммита\n"+
                                                                              "git reset --hard HEAD@{2} или хеш\n"+
                                                                              "или создать ветку git branch HEAD@{2}"),

                 ("130.Как вернуться к коммиту до выполнения git rebase","\"git reset --hard HEAD@{2} или хеш\\n\"+\r\n " +
                                                                              "\"или создать ветку git branch HEAD@{2}"),


                 ("131.Что делает команда SELECT * FROM table_name?","Выбирает все столбцы из таблицы\n"+
                                                                      "* это wildcard(символ подстановки)\n"+
                                                                      "используют обычно для тестирования\n"+
                                                                      "в продакшен использует конкретные столбцы"),

                 ("132.Чем отличается SELECT DISTINCT от обычного SELECT?"," Distinct возвращает только уникальные значения"),

                 ("133.Можно ли в SELECT запросе использовать несколько таблиц? Как это сделать?","Можно после FROM через запятую,\n"+
                                                                                     "а можно осмысленно через JOIN"),

                 ("134.Что делает оператор INNER JOIN?","INNER JOIN(внутреннее соединение) - это оператор, который объединяет строки\n"+
                                                         "из двух таблиц только тогда, когда выполняется условие связи\n"+
                                                         "Если совпадений нет, то такие строки не попадают в результат\n"+
                                                         "можно написатьь кратко JOIN\n"),

                 ("135.Чем отличается LEFT JOIN от RIGHT JOIN?","Оба оператора объединения, но работают в разных направлениях\n"+
                                                                "LEFT JOIN все строки из левой таблицы + совпадения из правой,\n " +
                                                                "если нет совпадения в правой части будет NULL\n"+
                                                                "RIGHT JOIN все строки из правой таблицы + совпадения из левой,\n"+
                                                                "если нет совпадения то в левой части NULL\n"),

                 ("136.Можно ли объединить более двух таблиц? Приведите пример.","Таблицы можно объединить последовательными JOIN\n"+
                                                                   "SELECT users.name,\n"+
                                                                    "products.name,\n"+
                                                                    "orders.quantity\n"+
                                                                    "orders.order_date\n"+
                                                                   "FROM users\n"+
                                                                   "INNER JOIN orders ON users.id=orders.id\n"+
                                                                   "INNER JOIN products ON orders.product_id=products.id\n"),

                 ("137.Что делает GROUP BY в SQL?","Это оператор, который группирует строки по указанным столбцам\n"+
                                                   "и позволяет применять к ним агрегатные функции(COUNT,SUM,AVG,MAX,MIN)\n"+
                                                   "Все неагрегированные поля в SELECT должны быть в GROUP BY\n"),

                 ("138.Как использовать COUNT с GROUP BY в SQL","Функция COUNT совместно с GROUP BY позволяет подсчитывать количестов\n"+
                                                                "строк в каждой группе. Это полезно для анализа данных,например:\n"+
                                                                "Сколько заказов у клиента?\n"+
                                                                "Сколько товаров в каждой категории?\n"+
                                                                "Сколько сотрудников в каждом отделе?\n"),

                 ("139.Что возвращает функция AVG() и как она используется?","Это агрегатная функция,которая вычисляет среднее арифмитическое по числовым столбцам\n"+
                                                                             "Если применяется с GROUP BY вычисляет среднее по группам\n"+
                                                                             "Практическое применение:\n"+
                                                                             "Расчет средней зарплаты по отделам\n"+
                                                                             "Анализ среднего времени доставки\n"),

                 ("140.Что такое подзапрос и когда его следует использовать?","Подзапрос(subquery) - это SQL-запрос, вложенный внутрь друго запроса\n"+
                                                                              "(SELECT,FROM, WHERE, HAVING, INSERT, UPDATE, DELETE)\n"+
                                                                              "Подзапросы полезны:\n"+
                                                                              "Фильтровать данные на основе другого запроса(WHERE, HAVING)\n"+
                                                                              "Создавать временные таблицы для основного запроса(FROM)\n"+
                                                                              "Заменить JOIN в сложных сценариях\n"+
                                                                              "Обновлять или удалять данные на основе условий\n"+
                                                                              "Типы подзапросов:\n"+
                                                                              "1. по месту использования:\n"+
                                                                              "  В WHERE, HAVING возвращает одно значение или список\n"+
                                                                              "  В FROM возвращает таблицу\n"+
                                                                              "  В SELECT возвращает одно значение для каждой строки\n"+
                                                                              "2. По количеству возвращаемых значений:\n"+
                                                                              "  Скалярный(1 столбец, 1 строка) используется с =,<,>\n"+
                                                                              "  Список значений(1 столбец, много строк) используется IN,ANY,ALL\n"+
                                                                              "  Табличный(много строк и столбцов) используется в FROM\n"+
                                                                              "Плюсы:\n"+
                                                                              "   Упрощает сложные запросы разбивая их на части\n"+
                                                                              "   Позволяют избежать многоступенчатых JOIN\n"+
                                                                              "   Читаемы для многоэтапной логики\n"+
                                                                              "Минусы:\n"+
                                                                              "   Могут быть медленнее JOIN(если СУБД не оптимизирует их)\n"+
                                                                              "   Вложенные подзапросы снижают читаемость\n"),

                 ("141. Вопрос: Чем отличается подзапрос в SELECT от подзапроса в WHERE?","Подзапрос в SELECT используется, когда нужно добавить вычисляемое поле к результату запроса\n"+
                                                                                          "Подзапрос WHERE ипользуется для фильтрации строк основоного запроса\n"+
                                                                                          ""),

                 ("142.Что делает функция CONCAT() в SQL?","Это строковая функция которая склеивает две и более строк\n"+
                                                           "|| для Postgres\n"),

                 ("143.Как используется функция NOW() в SQL?","Возвращает текущую дату и время\n"),

                 ("144.Как извлечь только год из даты с использованием функции SQL?","SELECT EXTRACT(YEAR FROM дата_столбец) AS год FROM\n"+
                                                                                     "SELECT DATE_PART('year',дата_столбец) AS год FROM\n"),

                 ("145. Что такое домены в SQL? Пример","Домены в SQL объединяет тип данных и ограничения в одно\n"+
                                                   "CREATE DOMAIN название AS text constraint format CHECK(\n"+
                                                   "VALUE~ '^d{5}$' OR VALUE ~'^d{5}-'d{4}$'"),

                 ("146.COLLATE Что это? стандартный пример","Определяет правила сортировки и сравнения\n"+
                                                            "en_US.UTF-8\n"),

                 ("147.Пример создания сортировки","Создание регистронезависимой сортировки\n"+
                                                   "CREATE COLLATION en_us_ci(\n"+
                                                   "provider = icu,\n"+
                                                    "locale = 'en-US-u-ks-level1'\n"+
                                                    "deterministic = false\n"),
                 ("148.Что сделает команда SELECT md5('hello world)?","Создаст хеш код. Небозапасен\n"+
                                                                       "Лучше использовать sha256 для безопасности\n"+
                                                                       "или uuid для экономии места\n"),

                 ("149. Тип данных для хранения файлов в PostgreSQL?","bytea"),

                 ("150. Тип uuid. Что это такое?","Универсальный уникальный идентификатор. Занимает 16 байт.\n"+
                                                  "Отображается как строка и может быть приведен к строке\n"+
                                                  "но как строка занимает больше места\n"),

                 ("151. Команда для вызова рандомного uuuid","SELECT get_random_uuid()"),

                 ("152. Сколько версий uuid существует? В какой версии есть время создания","Версий 8. В 7 есть временнная ментка. По ней можно сортировать"),

                 ("153. Что такое BOOLEAN? Какие состояния бывают?","Это логический тип данных размером 1 байт,который хранит истину,ложь или неизвестность\n"),

                 ("154. Какие варианты написания значений в BOOLEAN?","TRUE FALSE\n"+
                                                                       "'true' 'false'\n"+
                                                                       "'t' 'f'\n"+
                                                                       "'1' '0'\n"+
                                                                       "'on' 'off'\n"+
                                                                       "'yes' 'no'\n"+
                                                                       "NULL"),

                 ("155. Как создать перечисление ENUM и добавить новый тип","CREATE TYPE название AS ENUM ('first','second','third')\n"+
                                                                            "ALTER TYPE название ADD VALUE 'four'"),


                 ("156. Особенности сортировки ENUM","Сортировка происходит по порядку добавления В ENUM\n"+
                                                     "С помощью команды ALTER TYPE название ADD VALUE 'first' before 'zero'\n"+
                                                     "'after' для добавления после\n"),

                 ("157. Что за формат timestamp? Его особенности?","Это временная ветка. Бывает с указанием часового пояса и без\n"+
                                                                   "timestamp without time zone\n"+
                                                                   "timestamp with time zone\n"+
                                                                   "timestamptz с часовым поясом\n"+
                                                                   "timestamptz(0-6) точность в милисекундах, 6 по умолчанию\n"+
                                                                   "SELECT NOW()::timestamp получение текущего времени\n"),

                 ("158. Форматы дата и время?","ISO 8601 2024-01-31 15:30:08.234\n"+
                                               "может быть Т между датой и время\n"+
                                               "z в конце это гринвич\n"+
                                               "-06:00 указание часового пояса\n"),

                 ("159. Посмотреть и настроить формат даты","show DateStyle стандарт ISO,DMY\n"+
                                                            "установка своего DateStyle:\n"+
                                                            "set DateStyle= 'ISO, MDY'"),

                 ("160. Работа с часовым поясом. Как посмотреть и установииь часовой пояс","show time zone проверить часовой пояс\n"+
                                                  "set time zone 'America/Chicago'\n"+
                                                  "ALTER database название SET time zone 'UTC' время базы данных\n"+
                                                  "show config_file редактирование файла настройки\n"+
                                                  "время::timestampz at time zone 'CDT' установка времени по названию пояса\n"+
                                                  "at time zone '-06:00'  установка через разницу. Делает перевод в обратную сторону\n"+
                                                  "at time zone interval '-06:00' корректное смещение\n"),

                 ("161.Посмотреть все часовый пояса","SELECT * FROM pg_timezone_names"),

                 ("162. Формат даты и времени отдельно","DATE без часового пояса\n"+
                                                        "TIME with time zone\n"+
                                                        "TIME without time zone\n" +
                                                        "CURRENTDATE текущая дата\n"+
                                                        "LOCALTIME текущее время без указания времени\n"),

                 ("163. Что такое INTERVAL интервалы? Как создать интервал?","Интервал это отрезок времени. Удобно использовать например при бронировании\n"+
                                                       "SELECT '' ::interval создание интервала\n"+
                                                       "show intervalstyle стиль отображения интервала\n"+
                                                       "SET intervalstyle = установка стиля отображения интервала\n"),

                 ("164. Как посмотреть добавленные данные после INSERT INTO VALUES?","RETURNING *"),


                 ("165. Как создать идентификатор?","SERIAL PRIMARY KEY\n"+
                                                    "BIGSERIAL PRIMARY KEY\n"+
                                                    "BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY"),

                 ("166. Как создать последовательность?","CREATE SEQUENCE название\n " +
                                                         "AS BIGINT\n"+
                                                         "INCREMENT 1 шаг\n"+
                                                         "START 1\n"+
                                                         "MINVALUE 1\n"+
                                                         "CACHE сколько кешировать прежде чем начнет запршивать новые\n"),

                 ("167. Функции для SEQUENCE","SELECT nextval('название')\n"+
                                              "SELECT setval('название',2)\n"+
                                              "SELECT currval('название')\n"),

                 ("168. Какие бывают INTEGER","smallint - int2\n"+
                                              "integer int4\n"+
                                              "bigint int8\n"),

                 ("169. Тип данных NUMERIC","Тип данных для хранения чисел с произвольной точностью\n"+
                                            "Идеальный выбор для вычислений с высокой точностью\n"),

                 ("170. Дробные числа SQL","Дробные числа быстрые, но с ограниченной точностью\n"+
                                            "real 4 байт\n"+
                                            "double precision 8 байт\n"+
                                            "float(1-52)"),

                 ("171. Тип данных деньги","MONEY имеет точность два знака до запятой\n"+
                                           "имеет префикс ввиде валюты\n"+
                                           "просмотр префикса show lc_monetary \n"+
                                           "установка префикса SET lc_monetary = 'en_US.UTF-8'\n"+
                                           "MONEY не рекомендуется использовать. Возможны проблемы с точностью и конвертацией\n"+
                                           "Лучше использовать целые числа умноженные на 100\n"+
                                           "или NUMERIC\n"),

                 ("172. Что такое NaN","NaN это не число. Может быть у numeric и чисел с плавающей точкой\n"),

                 ("173. Что такое infinity","Это бесконечность может быть у numeric ,без ограничений и чисел с плавающей точкой\n"+
                                            "может быть отрицательной\n"),

                 ("174. Как можно преобразовать типы в Postgres","команда CAST(значение AS тип) или значение :: тип"),

                 ("175. Команда для определения типа Postgres","pg_typeof()"),

                 ("176. Команда для определения типа Postgres","pg_column_size()"),

                 ("177. Три символьных типа","char(размер) не гарантирует размер, просто выравнивает длину до нужного размера\n"+
                                             "character varying это varchar для postgres\n"+
                                             "text строка"),

                 ("178. Какие способы ограничений есть? Как сделать чтоб было название проверки","CHECK(название столбца >0) для целых чисел \n" +
                                                                                                 "CHECK(LENGTH(название столбца)>5) для строк\n" +
                                                                                                 "если ограничение записать через запятую то работает на уровне таблицы\n"+
                                                                                                 "CONSTRAINT название CHECK "),

                 ("179. Как создать автоматический идентификатор Postgres","id BIGINT GENERATED ALWAYS AS IDENTYTI PRIMARY KEY\n"+
                                                                           ""),

                 ("180. Как добавить принудительно значение идентификатора","INSERT INTO название таблицы (id) OVERRIDING SYSTEM VALUE values(значение id)\n"),

                 ("181. Как узнать номер последовательности для столбца","SELECT pg_get_serial_sequence('название таблицы','название столбца')\n"+
                                                                         "SELECT setval('название последовательности',(SELECT MAX(id) FROM 'название таблицы')"),

                 ("182. Какие типы данных есть для хранения строк IP адресов? " +
                 "Какие преимущества их использования?",                    "INET разные варианты ip адресов\n"+
                                                                            "CIDR хранит ip4 и ip6 вместе с маской\n"+
                                                                            "macaddr6 macaddr8 MAC адрес\n"+
                                                                            "Использование этих типов данных экономит место\n"+
                                                                            "а также имеет специальные функции для работы с ними\n"),

                 ("183. Какие типы данных для хранения json в Postgres\n"+
                 "Какие отличия",                                        "json имеет меньше размер,есть только защита от невадилидных данных\n"+
                                                                         "jsonb имеет больше размер, но скорость обработки выше потому,\n"+
                                                                         "что хранит в себе биты, а не текст\n"+
                                                                         "включает только последние значения по ключу, сортировку по ключу, удаляет пробелы\n"),

                 ("184. Представление значения json в строку","::json->string строка в кавычках\n"+
                                                               "::json->>string строка без кавычек\n"),

                 ("185. Как указать тип данных массив в Postgres","ARRAY или []"),

                 ("186. Как можно добавить значения в массив Postgres","INSERT INTO название таблицы(int_array, text_array, bool_array)\n" +
                                                                       "VALUES \n"+
                                                                       "(\n"+
                                                                       "ARRAY [1, 2, 3, 4],\n"+
                                                                       "ARRAY ['marigold','daisy','poppy','sunflower'],\n"+
                                                                       "ARRAY [true, false, true, false]\n"+
                                                                       ")\n"+
                                                                       "Второй вариант:\n"+
                                                                       "VALUES '{1,2,3}'\n"+
                                                                       "Вариант для вложенного массива:\n"+
                                                                       "'{{},{},{}}'"),

                 ("187. Извлечение элементов из массива Postgres","SELECT text_array[1] FROM название таблицы\n"+
                                                                  "Индексация начинается с 1\n"+
                                                                  "Можно использовать срезы text_array[1:3] выдаст с 1 по 3 элементы\n"+
                                                                  "text_array[:3] все элементы по 3\n"+
                                                                  "text_array[3:] все элементы с 3\n"),

                 ("188.Как найти массив SQL в котором, есть искомый элемент","SELECT text_array FROM table\n"+
                                                                             "WHERE text_array @> ARRAY['значение']\n"),

                 ("189. Как получить набор результатов из массива SQL","SELECT unnest(text_array)\n"+
                                                                       "Сделает выборку,где каждое значение массива будет строкой\n"),

                 ("190. Создание временной таблицы с помощью массива SQL","WITH flowers AS {\n"+
                                                                "SELECT id, unnest(text_array) AS flower\n"+
                                                                "FROM array_example}\n"+
                                                                "Это код создает временную таблицу с id и каждом цветком из таблицы\n"),

                 ("191. Как сделать сгенерированный столбец Postgres","CREATE TABLE people(\n"+
                                                                      "heigth_cm numeric\n"+
                                                                      "heugth_in numeric GENERATED ALWAYS AS (height/2.54) STORED)\n"+
                                                                      "можно вставить функцию после AS\n"+
                                                                      "Ограничения:\n"+
                                                                      "Должны быть стабильные данные,\n"+
                                                                      "нельзя генерировать столбец от генерированого\n"),

                 ("192. Типы данных для полнотекстового поиска","to_tsvector('строка') перевод в тип tsvector это отсортированный список различных лексим\n"+
                                                                "to_tsquery('слово') перевод в тип tsquery. Через оператор @@ можно проверить есть ли в tsvector tsquery\n"+
                                                                 "SELECT ts_vector('язык','строка') создание tsvector с указанием языка\n"),

                 ("193.Создание генерируемого столбца tsvector","название столбца TSVECTOR generated always AS(to_tsvector('english', content)) stored"),

                 ("194. Чтот такое битовые строки. Как их записывать?", "bit(3) точный размер\n"+
                                                                        "bit varying(32) размер до 32 включительно\n"+
                                                                        "B'0001'\n"+
                                                                        "'0001'::BIT(4)\n"+
                                                                        "Можно использовать как список true false\n"),

                 ("195. Что такое диапазон. типы диапазона. Правило ограничений","'[1,5]'::int4range это диапазон [1,6) --1,2,3,4,5\n"+
                                                                                 "'[1,5]'::numrange это диапазон [1,5]  --1,1.1,5.9 \n"+
                                                                                  "numrange(1,5) -- [1,5)  --1,4.9\n"+
                                                                                  "int4range(1,5) --[1,5) --1,2,3,4\n"+
                                                                                  "numrange(1,5,'[])' --[1,5] --1,5.9\n"+
                                                                                  "int4range(1,5,'(]) --(1,5] --2,3,4,5\n"+
                                                                                 "[] - края диапазона включены\n"+
                                                                                 "() - края диапазона невключены\n"+
                                                                                 "empty пустой диапазон включает все\n"+
                                                                                 "(,) полностью закрытый диапазон. Не включает ничего \n"),

                 ("196. Функции диапазона","WHERE столбец целых чисел @>5 диапазон целых чисел, который включает 5\n"+
                                           "WHERE столбец целых чисел && '[10,20)' есть ли пересечение между интервалами [1,11] включается\n"+
                                           "перемножение интервалов int4range(10,20)*int4range(15,25) -- [15,20)"),

                 ("197. Что такое мультидиапазон?","'{[3,7),[8,9)}'::int4multirange --3-6,8"),

                 ("198. Как создать составной тип Postgres","CREATE TYPE address AS(\n"+
                                                            "number text,\n"+
                                                            "street text);\n"+
                                                            "Нет возможности ввести ограничения на типы полей\n"),

                 ("199. Как заполнить составной тип","SELECT ROW ('1','street')::address Можно без ROW\n"+
                                                      ""),

                 ("200. Как получить отдельное поле составного типа","SELECT (название столбца).название поля"),

                 ("201. Какие ограничения в первичного ключа по умолчанию","NOT NULL UNIQUE"),

                 ("202. Может быть уникальное значение быть NULL","NULL всегда будет уникальным,\n"+
                                                                  "если не указать not distinct\n"),

                 ("203. Как создать внешний ключ","Первый вариант:\n"+
                                                   "название столбца тип данных(такой же тип данных как у столбца, на который ссылается)\n"+
                                                  "REFERENCES название таблицы название столбца, на который сслылается\n"+
                                                  "Второй вариант на уровне таблицы:\n"+
                                                  "FOREIGN KEY (название столбца) REFERENCES название таблицы(название столбца) на который ссылается\n"),

                 ("204. Удаление строк в родительской таблице в Postgres","1.ON DELETE RESTRICT по умолчанию вызовет ошибку\n"+
                                                                          "2.ON DELETE CASCADE удаление и в родительской и дочерней таблицы\n"+
                                                                          "3.ON DELETE SET NULL при удаление родительской строки во внешнем ключе ставится NULL\n"+
                                                                          "4.ON DELETE SET DEFAULT во внешнем ключе устанавливается значения по умолчанию. DEFAULT 0 REFERENCES при создании\n"+
                                                                          ""),

                 ("205. Что такое индексы в Postgres","Это отдельная структура данных,которые ускоряют поиск и извлечение данных из таблиц,\n"+
                                                      "но замедляют операции вставки и удаления\n"+
                                                      "содержит в себе копию части данных из таблицы\n"+
                                                      "содержит ссылки на таблицы и полную строку\n"),

                 ("206. Что такое ctid в Postgres","Скрытая системная таблица,показывающая где хранится строка\n"),

                 ("207. Типы индексов в Postgres"," 1. B-tree Бинарное дерево. Стандартный тип индекса. Для большинства операций >,=,BETWEEN,ORDER BY\n"+
                                                    "CREATE INDEX index_name ON table_name(column_name)\n"+
                                                    "2.HASH подходит только для = Быстрее бинаронго дерева\n"+
                                                    "CREATE INDEX index_name On table_name USING HASH (column_name)\n"+
                                                    "3.GIN GENERALIZED INVERTED INDEX для составных значений массивов,полнотекстовый поиск, JSON\n"+
                                                    "CREATE INDEX index_name ON table_name USING GIN(column_name)\n"+
                                                    "4.GiST GENERALIZED SEARCH TREE для полнотестового поиска\n"+
                                                    "CREATE INDEX ind_name ON table_name USING GiST(column_name)\n"+
                                                    "5.SP-GiST Space-Partitioned GiST для неоднородных данных\n"+
                                                    "CREATE INDEX ind_name ON table_name USING SP-GiST(column_name)\n"+
                                                    "6. BRIN Block Range Index для очень болиших таблиц с коррелированными данными\n"+
                                                    "CREATE INDEX idn_name ON table_name USING BRIN(column_name)\n"),

                 ("208.Какой тип для первичного ключа лучше использовать?","Лучше всего использовать большие целые числа\n"+
                                                                            "Первичный ключ имеет более слабую безопасность\n"+
                                                                            "Есть два решения дополнительная таблица с ключами или UUID\n"+
                                                                           "При использовании UUID нужно учитывать что их бывает 6 видов и 2 похожих типа\n"+
                                                                           "Стандартный UUID это случайный UUID. Случайная вставка потребует перестроения дерева. Поэотму лучше использовать UUID 7 версии.\n"+
                                                                           "У него в начале идет дата и по ней можно сортировать и располагать строки по дате создания\n"+
                                                                           "Еще UUID имеет преимущество, если например пользователь получает ID раньше подключение к базе данных\n"+
                                                                           "UUID можно сразу присвоить ID\n"),

                 ("209.Какие столбцы желательно использовать под индекс.\n"+
                 "При какой ситуации поиск происходит по таблице, а не по индексу ","Нужно выбирать более уникальные столбцы\n"+
                                                                                    "Если выборка более половины таблицы,\n"+
                                                                                    "то вероятно поиск будет по таблице, а не индексу\n"),

                 ("210.Как создать составной индекс","CREATE INDEX multi ON users USING BTREE(first_name,last_name,birthday)\n"),

                 ("211.Как правильно создавать и использовать составной индекс","Нужно использовать правило слева направо\n"+
                                                                            "Перечесление столбцов в индексе должно соответствовать таблице\n"+
                                                                            "При поиске нужно задавать самый левый столбец, иначе будет поиск по таблице\n"+
                                                                            "При пропуске столбца вовремя поиск добавляет все строки из предущего\n")











            };
        }

        public int GetNumber()
        {
            Random random = new Random();
            //0-130 git
            //131 sql
            return random.Next(131,listQA.Count-1);
        }

        public void PrintQA()
        {
            int number=GetNumber();
            Console.WriteLine($"Вопрос номер {number}");
            Console.WriteLine(listQA[number].Item1);
            Console.WriteLine("\n");
            Console.ReadKey();
            Console.WriteLine($"Ответ номер {number}");
            Console.WriteLine(listQA[number].Item2);
            Console.WriteLine("\n");

        }
    }
}

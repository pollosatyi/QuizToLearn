using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QuizToLearn
{
    internal class ListQA
    {
        public List<(string, string)> listQA { get; set; }
        public ListQA()
        {
            listQA = new List<(string, string)>()
            {
                ("0. Что такое git-flow?"," это модель ветвления для Git, которая предлагает стандартизированный подход к управлению ветками в проекте.\n"+
                                          "Основные ветки в Git-flow:\n"+
                                           "master. В нем стабильный код. Хранит в себе версии релизов \n"+
                                           "develop. Основная ветка для разработки.В нее сливаются все ветки feature и из нее создаются release ветки\n"+
                                           "feature.Создаются  от develop и сливаются в develop.\n "+
                                            "release. Создаются от develop.Тестирование и документация. Сливается в master и develop\n"+
                                            "hotfix. Создаются для исправления багов. Сливаются в master и develop"),

                ("1. Чем git-flow отличается от trunk-based development?","это методология разработки, при которой вся команда работает в одной основной ветке (trunk или main)\n" +
                                                                        ", а изменения интегрируются как можно чаще (в идеале — несколько раз в день).\n" +
                                                                        " Это противоположность Git-flow, где используется множество долгоживущих веток."),

                ("2. Почему git-flow может тормозить команды, работающие по Scrum?","В Git-flow фичи разрабатываются в изоляции, а мержатся в develop только после полной готовности.\n" +
                                                                                  "merge часто происходит в ручную из за большого обьема кода\n "+
                                                                                  "У Scrum принцип \"работющий код каждый спринт\"\n"+
                                                                                  "Что подразумевает частный и простой merge "),

                ("3. Как установить git-flow на macOS через brew?","Проверить через терминал установлен и обновлен Homebrew\n" +
                                                                 " в терминале brew install git-flow.\n"),

                ("4. Как проверить, установлен ли git-flow и его версия?","which git-flow выдает путь где установлен git-flow\n"+
                                                                           "git-flow version выдает версию"  ),

                ("5.Можно ли использовать git-flow без установки расширения? ","Можно в ручную создать ветки и управлять ими с помощью гит\n. "),

                ("6.Как проинициализировать git-flow?","git flow init"),

                ("7.Какие ветки создаются при инициализации?","Две ветки получают названия\n"+
                                                                "main (или master) — стабильная ветка для релизов.\n"+
                                                               "develop — основная ветка для разработки.\n"+
                                                               "Остальные просто именуются.\n"+
                                                               "feature/ —  ветка фич.\n"+
                                                               "release/ — ветка релизов\n"+
                                                                "hotfix/ — ветка срочных исправлений.\n"),
                
                ("8.Что произойдёт, если репозиторий уже содержит другие ветки?","Если уже есть ветки то git flow init не повредит их\n"+
                                                                                 "Init настроит git flow,учитывая существующую структуру\n"+
                                                                                 "Если изначально были ветки main или developer\n"+ 
                                                                                 "они остаются вместо создания новых\n"+
                                                                                 "При отсутствии developer создается от main\n "+
                                                                                 "Если совпадают старые вспомогательные остаются\n"+ 
                                                                                  "а новые создаются с префиксом\n"),

                ("9.Почему develop должна быть защищена в CI/CD? ","Нужно поддерживать стабильность ветки develop\n "+
                                                                   "Все коммиты должны делаться через merge/pullRequests\n "+
                                                                   "Это снижает риск поломанного коммита и делает историю измений контролируемой\n"+
                                                                   "иначе весь процесс теряет смысл\n"),

                ("10.Как начать фичу?","Переключится на develop git checkout develop\n"+
                                       "Убедиться что локальная вумудщз соответсвует удаленной git pull origin develop\n"+
                                       "Создать новую фичу ветку и перейти на неё git checkout -b feature/new-feature-name\n"+
                                       "Добавить код и сделать коммит git add . git commit -m\n"+
                                       "Снова проверить обновления из develop git pull origin develop\n"+
                                       "Запушить ветку и открыть Merge/PullRequests  git push origin feature/newFeature\n"+
                                       "Затем зайти в git host и запросить слияние\n"+
                                       "После удачного слияния удаляем ветку локально: git branch -d feature/newFeature\n "+
                                       "и на удаленном сервере git push origin --delete feature/newFeature\n"),

                ("11. Что делает feature finish?","Код из feature/NewFeature, объединяется с develop через merge/pullRequests\n"+
                                                   "Удаляется ветка локально и удаленно\n"),

                ("12.Что произойдёт при feature finish, если есть незакоммиченные изменения?","выйдет ошибка. Можно сделать коммит \n"+
                                                             "git commit -m\n"+
                                                             "Или сделать временные сохраненее\n"+
                                                             "git stash\n"+
                                                             "git flow finish feature/newFeature\n"+
                                                             "git pop - возвращение изменений\n"+
                                                             "можно удалить изменения\n"+
                                                             "git reset --hard\n"),

                ("13.Как работать с фичей вдвоём?","один разработчик создает feature\n"+
                                                "git flow feature start newFeature\n"+
                                                "Пушим ветку на сервер\n"+
                                                "git push -u origin feature newFeature\n"+
                                                "второй разработчик получает актуальные ветки\n"+
                                                "git fetch --all\n"+
                                                "переходим на feature\n"+
                                                "git checkout feature\n"+
                                                "подтягиваем последние изменения\n"+
                                                "git pull origin feature\n"),
                ("14.Как начать релиз?","Ветка develop стабильна\n"+
                                         "Тесты проходят (CI/CD зелёный)\n"+
                                         " Версия проекта обновлена\n"+
                                         "git checkout develop\n"+
                                         "git pull origin develop\n"+
                                         "git flow release start new\n"
                                         ),
                ("15.Что делает release finish","смержит release в main\n"+
                                                "смержит release в develop\n"+
                                                "удалит release\n"+
                                                "переключит на develop\n"),

                ("16.Что делать, если хотфиксы уже в master,\n"+
                "а develop отстаёт?",
                                                       "Есть два способа:\n"+
                                                       "Первый способ:\n"+
                                                       "Merge master в develop\n"+
                                                       "git checkout develop\n"+
                                                       "git pull origin develop\n"+
                                                       "git merge master\n"+
                                                       "git push origin develop\n"+
                                                       "Второй способ:\n"+
                                                       "Перенос хотфиксов по одному. Cherry pick хотфиксов\n"+
                                                       "git checkout develop\n"+
                                                       "git pull origin develop\n"+
                                                       "git cherry-pick <хеш хотфикса>\n"+
                                                       "git push origin develop\n"),

               ("18.Когда использовать hotfix?","Когда критический баг в production, а релиз ожидается не скоро\n"),

               ("19.Что делает hotfix finish","Завершает ветку hotfix\n"+
                                               "merge в master и develop\n"+
                                               "а также делается теги\n"+
                                               "возвращение в исходную ветку\n"),

                ("19.Какие есть альтернативы GitHub?","GitLab, Bitbucket, Azure DevOps"),

                ("20.Можно ли работать в команде без GitHub?","Если только использовать свой сервер или одну папку с проектом"),

                ("21.Что такое origin в контексте GitHub?","Алиас псевдоним для адреса вашего  на удаленного репозитория\n"+
                                                           "Сокращенная ссылка чтоб не вводить полный url адрес каждый раз\n"),

                ("22.Что происходит при git add .","В индекс(stading area) добавляются:\n"+
                                                    "Новые файлы untracked\n"+
                                                    "Измененные файлы modified\n"+
                                                    "Удаленные файлы deleted\n"+
                                                    "Технически:\n"+ 
                                                    "git вычисляет хеш каждого файла и сохраняет его временной зоне\n "+
                                                    "данные файлов записываются в объектную базу Git(папка .git/objects\n"),

                ("23.В чём разница между git commit и git commit -a","git commit требует git add\n"+
                                                                     "git commit -a добавляет в коммит  все изменения  tracked файлов\n"+
                                                                     "добавление новых untracked требует git add\n"),

                ("24.Что делает git add -p?","Это инструмент для интерактивного выбора изменений,\n"+        
                                              "которые нужно добавить в staging area\n"+
                                              "Позволяет разбить изменения в файле на кусочки(hunks)\n"+
                                              "и выбрать какие попадут в коммит, а какие нет\n "+
                                              "не работает для новых файлов\n"),

                ("25.Что такое индекс в Git?","Индекс это промежуточная область(staging area или cache),\n"+
                                              "где Git временно хранит изменения перед тем как они попадут в коммит\n"+
                                              "Untracked - новый файл, еще не отслеживаемый\n"+
                                              "Modified - файл изменён, но не добавлен в индекс\n"+
                                              "Staged - изменения добавлены в индекс(готовы к коммиту)\n"+
                                              "Committed - изменения сохранены в репозиторий\n "+
                                              "git reset удаляет изменения в индексе\n"+
                                              "git diff --cached Показывает изменения добавленные в индекс\n"),

                ("26.Можно ли сделать коммит без git add","Можно с помощью команды git commit -a\n"),

                ("27.Что делает git checkout branch-name?","переключение на указанную ветку в git"),

                ("28.Как переключиться на предыдущий коммит?","git checkout Head~1\n"+
                                                              "git checkout SHA 1\n"+
                                                              "просмотр изменений git show HEAD~1\n"),

                ("29.Как вернуться к последнему коммиту после checkout на хеш? ","git switch - переключение на предыдущую\n"+
                                                                                  "git switch имя ветки\n"+
                                                                                  "git checkout имя ветки\n"+
                                                                                  "Если название ветки неизвестно\n"+
                                                                                  "git reflog в сообщение будет написано названии ветки\n"),

                ("30.В чём разница между git switch и git checkout?","switch новая команда для простого и понятного переключения между ветками\n"+
                                                                     "откажется работать если есть незакоммичные изменения\n"+
                                                                     "требуется явного --merge или --discard-changes\n"+
                                                                     "checkout попытается сохранить изменеия автоматически\n"),
                
                ("31.Как найти хеш нужного коммита?","git log\n"+
                                                     "--oneline - сокрашенная хеш и сообщение\n"+
                                                     "--graph с визуализации ветвления\n"+
                                                     "-n 5 последние пять коммитов\n"+
                                                     "-- author \n+" +
                                                     "--grep\n по сообщению"),

                ("32.Как создать аннотированный тег?","git tag -a имя -m \"сообщение\"\n"+
                                                      "git push origin имя - отправка\n"+
                                                      "git push origin --tags - отправка всех\n"),

                ("33.Как перейти к тегу?","git checkout имя\n"+
                                           "git switch --detach имя\n"),

                ("34.Как посмотреть все теги?","git tag или git show-ref --tags, git tag -n подробная информация\n"),

                ("35.В чём разница между легковесным и аннотированным тегом?","Разницами между тегами заключается в способе их хранения и дополнительной информации\n"+
                                                                               "Легковесный тег Lightweight Tag это указатель на конкретный коммит\n"+
                                                                               "не содержит дополнительной информации\n"+
                                                                               "git tag имя тега\n"+
                                                                               "Аннотированный тег Annotated Tag это полноценный объект в Git, который хранит:\n"+
                                                                               "Имя тега\n"+
                                                                               "Сообщение(как у коммита)\n"+
                                                                               "Автор тега\n"+
                                                                               "Дату создания\n"+
                                                                               "Указатель на коммит\n+" +
                                                                               "Может быть подписан GPG(для верификации)\n"+
                                                                               "git tag -a имя тега -m соббщение тега\n"),

                ("36.Как отправить тег в удалённый репозиторий?","git push origin имя тега\n"+
                                                                 "git push origin --tags  -отправка всех тегов\n"),

                ("37.Как создать и сразу перейти в новую ветку?","git checkout -b имя ветки\n"+
                                                                 "git switch -c имя ветки\n"+
                                                                 "git checkout -b имя ветки источник\n"),

                ("38.Как посмотреть список всех веток?","git branch - только локальные\n"+
                                                        "git branch -r только удалленые ветки\n"+
                                                        "git branch -a все ветки\n"+
                                                        "git branch -vv подробный вывод(с коммитами и связями)\n"+
                                                        "git show-branch графическое представление\n"+
                                                        "git log --oneline --graph --all история всех веток в виде графа\n"),

                ("39.Как создать ветку от определённого коммита?","git branch имя ветки хеш\n"+
                                                                  "git checkout -b новая ветка хеш коммита - с переходом\n"+
                                                                  "git switch -c новая ветка хеш коммита - с переходом\n"),

                ("40.Что делает git switch -c name?","создание ветки с переходом\n"),

                ("41.Где хранятся ссылки на ветки?","Вся информации о ветках локальных и удаленных хранится в папке .git\n"+
                                                    "Каждая ветка это файл, содержащий SHA-1 хеш последнего коммита в этой ветке\n"+
                                                    ".git/refs/heads\n"+
                                                    ".git/refs/remotes/origin\n"),

                ("42.Что делает git merge feature?","объединяет изменения из ветке feature в текущую\n"+
                                                     "git checkout main\n"+
                                                     "git merge feature\n"+
                                                    "Fast-Forward Merge(быстрая перемотка)\n"+
                                                    "Если main не имеет новых коммитов после ответвления feature:\n"+
                                                    "Git просто перемещает указатель main на последний указатель feature\n"+
                                                    "История остается линейной(без нового коммита)\n"+
                                                    "Recursive merge(Рекурсивное слияние)\n"+
                                                    "Если в main и feature есть изменения\n"+
                                                    "Git создает новый коммит слияния(merge commit)\n"+
                                                    "В истории появляется развилка(ветвление и соединение)\n"+
                                                    "Конфликты слияния. Если в main и feature затрагивают одни и те же строки \n"+
                                                    "Git останавливает процесс и сообщает от конфликте\n"+
                                                    "Нужно в ручную исправить конфликт,затем завершить слияние\n"+
                                                    "git add .\n"+
                                                    "git merge --continue\n"+
                                                    "Флаги:"+
                                                    "--no --ff всегда создает коммит сляиния\n"+
                                                    "--squash - объединяет все изменения в один коммит сливаемой ветки\n"+
                                                    "--abort - отменяет слияние при конфликтах\n"),

                ("43.Что такое fast-forward merge?","Это тип слияния в Git, при котором история веток не создает новый коммит\n+" +
                                                    "слияния, а просто перемещает указатель текущей ветки вперед до конца целевой\n"
                                                    ),

                ("44.Как отменить конфликтное слияние?","Если конфликты не разрешены git merge --abort\n"+
                                                        "Кофликты разрешены, но нет коммита  git reset --hard HEAD\n"+
                                                        "Merge уже закомичен git reset --hard HEAD~1(локально)\n"+
                                                                             "git revert -m 1 <commit> если был отправлен\n"),

                ("45.Как увидеть коммиты, которые будут вливаться?","git log имя1 имя2\n"+
                                                                    "git log --online --graph --all графический просмотр\n"),

                ("46.Что делает git merge --no-ff","выполняет слияние веток в Git всегда создавая новый коммит\n"+
                                                    "даже если можно сделать fast-forward\n"),

                ("47.Как связать локальный проект с GitHub?","git init\n"+
                                                              "git add .\n"+
                                                              "git commmit -m\"сообщение\"\n"+
                                                              "git remote add origin ссылка\n"+
                                                              "git push -u origin main\n"),

                ("48.Как отправить первую версию на GitHub?", "git init\n"+
                                                              "git add .\n"+
                                                              "git commmit -m\"сообщение\"\n"+
                                                              "git remote add origin ссылка\n"+
                                                              "git push -u origin main\n"),

                ("49.Как переименовать удалённый репозиторий?","В репозитории GitHub Settings - Repository name - Rename\n"+
                                                               "Обновление локального git remote set-url origin новая ссылка\n"),

                ("50.Как проверить адрес удалённого репозитория?","git remote get-url origin\n"),

                ("51.Как удалить привязку к удалённому?","git remote remove origin \n"+
                                                         "git remote rm origin старая версия\n"+
                                                         "git remote -v проверка"),

                ("52.Какие типы объектов есть в Git?","Есть 4 основных типа обьектов в Git\n"+
                                                      "которые хранят историю и структуру репозитория\n"+
                                                      "Они лежат в папке .git/objects и имеют хеш индекаторы SHA-1\n"+
                                                      "Blob Binary Large Object:\n"+
                                                      "Содержимое файлов в сжатом ввиде\n"+
                                                      "Tree (Дерево):\n"+
                                                      "Структуру каталогов (аналогично папкам в файловой системе)\n"+
                                                      "Ссылки на blobs(файлы) и другие trees(подкаталоги)\n"+
                                                      "Метаданные: имена файлов, права доступа\n"+
                                                      "Commit(Коммит)\n"+
                                                      "Ссылку на tree (состояние файлов на момент коммита)\n"+
                                                      "Ссылки на родительские коммиты. Коммитов может быть один или два(при слияние)\n"+
                                                      "Автора, дату и сообщение\n"+
                                                      "Tag(Аннотированный тег):\n"+
                                                      "Ссылку на коммит(обычно версию)\n"+
                                                      "Имя тега, автора, дату, описание\n"),

                ("53.Где они физически хранятся?","Все объекты хранятся в .git/objects\n"+
                                                  "git cat-file -t sha или tag показать тип объекта\n"+
                                                  "git cat-file -p показать тип объекта\n"),

                ("54.Что такое Blob?","Binary Large Object. Один из четырех основных типов объектов в Git\n"+
                                       "которое хранит содержимое файла\n"+
                                       "Создается командой git add\n"+
                                       "Вычисляется SHA1 и сохраняет сжатые данные\n"),

                ("55.Что такое Tree?","Это объект Git которое описывает структуру каталогов и файлов\n"+
                                       "Он связывает blob объекты и другие tree объекты \n"+
                                       "в единую файловую систему\n"),

                ("56.Что такое Commit-объект?","Это объект Git, который фиксирует состояние репозитория\n"+
                                               "в определенный момент времени. Он хранит:" +
                                               "Снимок файловой структуры(через tree объекты)\n"+
                                               "Метаданные: автора, дату, сообщение и ссылку на родительские коммиты\n"),

                ("57.Что делает команда git init folder-name, если папка уже существует?","Создает новый git репозиторий в указанной папке\n" +
                                                                                           "Git создаст скрытую подпапку .git\n"+
                                                                                           "и инициализирует в ней репозиторий\n"),

                ("58.В чём принципиальная разница между git init и git clone?","init создает новый репозиторий с нуля\n"+
                                                                               "clone копирует существующий репозиторий(локальный или удаленный)\n"),

                ("59.Можно ли использовать git init внутри уже инициализированного репозитория?","Git проигнорирует команду git init и выдаст предупреждение\n"),

                ("60.Что хранится в папке .git после git init?"," два основных файла:\n"+
                                                                "HEAD указывает на текущую ветку\n"+
                                                                "config локальные настройки репозитория\n"+
                                                                "Служебные папки:\n"+
                                                                "hooks скрипты для автоматизации\n"+
                                                                "info файл для игнорирования файлов\n"+
                                                                "objects хранилище объектов Git\n"+
                                                                "refs ссылки на ветки и теги\n"),

                ("61.Как проверить, инициализирован ли каталог как Git-репозиторий?","проверить есть ли папка .git\n"+
                                                                                     "git status\n"+
                                                                                     "git branch\n"+
                                                                                     "git remove -t\n"),

                ("62.Что произойдёт, если выполнить git clone <https://url.git> . в уже инициализированной папке?","Выдаст ошибку\n"),

                ("63.Как клонировать репозиторий без загрузки содержимого (bare)?","git clone --bare url\n"),

                ("64.Что означает FolderName в команде git clone url FolderName?","Создаст папку и клонирует туда репозиторий\n"+
                                                                                  "Если папка есть то выдаст ошибку\n"),

                ("65.Как клонировать только определённую ветку?","git clone --branch dev --single-branch Url - клонирование одной ветки\n"+
                                                                 "git fetch origin other-branch - добавление ветки позже\n"),

                ("66.Что делает параметр --depth при клонировании? ","Позволяет клонировать репозиторий без полной истории\n"+
                                                                     "загружая только последние N коммитов указанной ветки\n"+
                                                                     "Это называется поверхностным клонированием(shallow clone)\n"),

                ("67.Чем отличается git diff от git diff --staged?","git diff сравнивает рабочую директорию и индекс(Staging Area)\n"+
                                                                    "git diff --stage сравнивает индекс и последний коммит\n"+
                                                                    "git diff HEAD рабочую директорию vs последний коммит\n"),

                ("68.Что покажет git diff master...feature?","Сравнивает изменения,внесенные в ветку feature\n"+
                                                             "Относительно точки расхождения с веткой master\n"+
                                                             "git diff origin/master...origin/feature\n удаленной ветки\n"),

                ("69.Что произойдёт, если файл изменён, но не проиндексирован? Где он появится в git status?","файл будет строке modified\n"),

                ("70.Что делает флаг --name-only у git diff?","Упрощает вывод, показывая только имена изменных файлов, без деталей самых изменений\n"+
                                                               ""),

                ("71.Почему git diff игнорирует неотслеживаемые файлы?","Потому что до добавления Git не знает про них\n"+
                                                                        "--no--index для принудительного сравнения\n"),

                ("72.Что делает git add -p и зачем это нужно?","запускает интерактивный режим добавления изменений в индекс\n"+
                                                               "Она позволяет выборочно добавлять части файлов(отдельные части, а не весь файл целиком\n"+
                                                               "y - yes добавить в текущий кусок в staging\n"+
                                                               "n - no пропустить кусок\n"+
                                                               "s - split разделить на более мелкие части\n"+
                                                               "e  - edit в ручную отредактировать кусок перед добавлением\n"+
                                                               "q - quit выйти из режима\n"+
                                                               "? - справка по всем опциями\n"),

                ("73.Чем отличается git add -i от git add -p?","git add -i работает с целыми файлами\n"+
                                                               "Имеет текстовое меню с опциями\n"+
                                                               "update - добавить файлы в staging\n"+
                                                               "revert - убрать файлы из staging\n"+
                                                               "add untracked - добавить неотслеживаемые файлы\n"+
                                                               "patch перейти в режим git add -p для выбранного файла\n"),

                ("74.Что произойдёт, если после git add . изменить файл?","Будет две версии файла одна в staging area,\n"+
                                                                           "другая в рабочей директории\n"),

                ("75.Как удалить файл из индекса, но оставить его в рабочей директории?","git restore --staged имя\n"+
                                                                                           "git reset HEAD имя\n"),

                ("76.Можно ли добавить в индекс только часть изменений одного файла?","git add -p\n"+
                                                                                      "git add -e ручное редактирование патчей\n"+
                                                                                      "git add -i добавление отдельных строк\n"),

                ("77.Что удаляет git reset --hard?","Отменить все изменения до последнего коммита\n"+
                                                    "git reset hard <хеш коммита> отменить все изменения до коммита\n"+
                                                    ""),

                ("78.Как отменить только последние изменения, оставив индекс нетронутым?","git restore имя\n"+
                                                                                          "git restore .\n"),

                ("79.Зачем нужен git clean -df и что он удаляет?","Он удаляет untracked файлы\n"+
                                                                   "d - флаг для удаления директорий\n"+
                                                                   "f - флаг опасных операций\n"+
                                                                   "x - флаг удаления из списка gitignore\n"),

                ("80.Что будет, если сделать git reset без аргументов?","покажет список флагов для git reset\n"),

                ("81. Чем reset --hard отличается от revert","revert создает коммит отменяющий изменения\n"+
                                                             "сохраняет историю коммитов, добавляя новый\n"),

                ("82.Что делает команда git commit -a -m \"msg\" и чем она отличается от git commit -m \"msg\"?",""+
                                                          "-a позволяет добавить изменения в файлах без git add .\n"),

                ("83.Можно ли закоммитить новые файлы с помощью git commit -a","новые файлы обязательно нужно добавлять в индекс\n"),

                ("84.Как отменить последний коммит, не удаляя изменения в рабочей директории?","git reset --soft HEAD~1\n"+
                                                                                               "git reset --mixed HEAD~1\n"+
                                                                                               "git revert HEAD\n"),

                ("85.В чем разница между git reset --soft, --mixed и --hard","--soft Перемещает указатель, не трогает изменения\n"+
                                                                             "--mixed Перемещает указатель, изменения становятся unstaged\n"+
                                                                             "--hard Перемещает указатель, сбрасывает изменения\n "),

                ("86.Что делает команда git commit --amend?","позволяет изменить коммит без создания нового\n"+
                                                             "-m изменить сообщение\n"+
                                                             "Git не удаляет старый коммит,а создает новый\n"+
                                                             "старый коммит становится недостижимым\n"),

                ("87.Что делает git revert HEAD --no-edit?","Выполняет отмену последнего коммита,\n"+
                                                            "создавая новый коммит с обратными изменениями\n"+
                                                            "при этом автоматически используя стандартное сообщение коммита\n"+
                                                            "без открытия редактора коммита\n"),

                ("88.В каких случаях git revert безопаснее, чем git reset?","когда коммит отправлен на удаленный репозиторий\n"+
                                                                            "нужно сохранить историю изменений\n"+
                                                                            "когда работают в одной ветке больше одного разработчика\n"+
                                                                            "reset может удалить измения другого разработчика\n"+
                                                                            "когда нужно отменить конкретный коммит, \n"+
                                                                            "reset удалит всё до указанного коммита\n"+
                                                                            "когда нужно уменьшить количество конфликтов\n"),

                ("89.Что произойдёт после выполнения git reset --hard @~2","полный сброс состояния репозитория до 2 коммита\n"),

                ("90.Что делает git reset --keep @~ и когда он полезен?","безопасная альтернатива git reset --hard\n"+
                                                                         "Перемещает указатель HEAD на предыдущий коммит\n"+
                                                                         "Сохраняет незакомиченные изменения в рабочей директории,\n "+
                                                                         "если не конфликтуют с целевым коммитом\n"+
                                                                         "сбрасывает индекс\n")

                                                              
            };
        }

        public int GetNumber()
        {
            Random random = new Random();
            return random.Next(0,listQA.Count-1);
        }

        public void PrintQA()
        {
            int number=GetNumber();
            Console.WriteLine($"Вопрос номер {number}");
            Console.WriteLine(listQA[number].Item1);
            Console.WriteLine("\n");
            Console.ReadKey();
            Console.WriteLine($"Ответ номер {number}");
            Console.WriteLine(listQA[number].Item2);
            Console.WriteLine("\n");

        }
    }
}
